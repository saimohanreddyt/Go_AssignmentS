


	 1) Creating Concurrent Workflows in Go with Goroutines and Channels
	 2) Ping pong
	 3) Server using channel
	 4) Server and worker channel
	 5) Random int generator using channel
	 6) Files working
	 7) Json
	 8) Error handling
	 9  Structure (User) 
	 10) Password matching(regex)
------------------------------------------------------------------------
1.   package main

     import (
	"fmt"
	"sync"
)

func main() {
	students := []Student{
		Student{Name: "Reddy"},
		Student{Name: "Reddys"},
	}
	result := RegisterStudents(students, Course{Name: "Introduction to Kloudone"})
	fmt.Print(result)
}

type RegisterStudentsResults struct {
	Results []StudentRegistrationResult
}

type StudentRegistrationResult struct {
	Registration StudentRegistration
	Error        error
}

type StudentRegistration struct {
	Student Student
	Course  Course
}

type Course struct {
	Name string
}

type Student struct {
	Name string
}

func RegisterStudents(students []Student, course Course) RegisterStudentsResults {
	output := make(chan RegisterStudentsResults)
	input := make(chan StudentRegistrationResult)
	var wg sync.WaitGroup
	go handleResults(input, output, &wg)
	defer close(output)
	for _, student := range students {
		wg.Add(1)
		go ConcurrentRegisterStudent(student, course, input)
	}

	wg.Wait()
	close(input)
	return <-output
}

func handleResults(input chan StudentRegistrationResult, output chan RegisterStudentsResults, wg *sync.WaitGroup) {
	var results RegisterStudentsResults
	for result := range input {
		results.Results = append(results.Results, result)
		wg.Done()
	}
	output <- results
}

func ConcurrentRegisterStudent(student Student, course Course, output chan StudentRegistrationResult) {
	result := RegisterStudent(student, course)
	output <- result
}

func RegisterStudent(student Student, course Course) StudentRegistrationResult {
	return StudentRegistrationResult{
		Registration: StudentRegistration{
			Student: student,
			Course:  course,
		},
	}
}
------------------------------------------------------------------------
2.  package main
 
    import (
	"fmt"
	"time"
)
 
func main() {
	pingChan := make(chan int, 1)
	pongChan := make(chan int, 1)
 
	go ping(pingChan, pongChan)
	go pong(pongChan, pingChan)
 
	pingChan <- 1
 
	select {}
}
 
func ping(pingChan <-chan int, pongChan chan<- int) {
	for {
		ball := <-pingChan
 
		fmt.Println("Ping", ball)
		time.Sleep(1 * time.Second)
 
		pongChan <- ball+1
	}
}
 
func pong(pongChan <-chan int, pingChan chan<- int) {
	for {
		ball := <-pongChan
 
		fmt.Println("Pong", ball)
		time.Sleep(1 * time.Second)
 
		pingChan <- ball+1
	}
}
------------------------------------------------------------------------
3.   package main

     import (
	"fmt"
	"net/http"
)

func myName(w http.ResponseWriter, r *http.Request){
	fmt.Fprintf(w,"Hi, Reddy! Welcome to my Page.")
}


func helloEveryone(w http.ResponseWriter, r *http.Request){
	fmt.Fprintf(w, "Hello Every One!")
}


func main(){

	http.HandleFunc("/",  myName)
	http.HandleFunc("/about", helloEveryone)
	http.ListenAndServe(":8000",nil)


}
------------------------------------------------------------------------
4.  package main

    import (
	"fmt"
	"time"
	)

// These workers will receive work on the `jobs` channel and send the corresponding
// results on `results`. We'll sleep a second per job to simulate an expensive task.
func worker(id int, jobs <-chan int, results chan<- int) {
    for j := range jobs {
        fmt.Println("worker", id, "started  job", j)
        time.Sleep(time.Second)
        fmt.Println("worker", id, "finished job", j)
        results <- j * 2
    }
}

func main() {

	// Two channels - to send them work and to collect their results. 
    jobs := make(chan int, 100)
    results := make(chan int, 100)

    // This starts up 3 workers, initially blocked because there are no jobs yet.
    for w := 1; w <= 3; w++ {
        go worker(w, jobs, results)
    }

    // Here we send 5 `jobs` and then `close` that channel to indicate that's all the work we have.
    for j := 1; j <= 5; j++ {
        jobs <- j
    }
    close(jobs)

    // collect all the results of the work.
    for a := 1; a <= 5; a++ {
        <-results
    }

------------------------------------------------------------------------
5.  package main

    import "fmt"

func sum(s []int, c chan int) {
	sum := 0
	for _, v := range s {
		sum += v
	}
	c <- sum // send sum to c
}

func main() {
	s := []int{7, 2, 8, -9, 4, 0}

	c := make(chan int)
	go sum(s[:len(s)/2], c)
	go sum(s[len(s)/2:], c)
	x, y := <-c, <-c // receive from c

	fmt.Println(x, y, x+y)
}
------------------------------------------------------------------------
6.   //File_Reading
	package main

	import ("fmt"
		"os"
		"bufio"
		"io/ioutil"
)



func main ()  {
	data, err := ioutil.ReadFile("Assignment1.txt")
	if err!= nil{
		fmt.Println(err)
	}
	fmt.Println(string(data))

	f,err := os.Open("Assignment1.txt")
	defer f.Close()

	if err != nil{
		fmt.Println(err)
	}
	reader  := bufio.NewReader(f)
	b1,err := reader.Peek(10)
	if err != nil{
		fmt.Println(err)
	}
	fmt.Println(string(b1))
}




// File_Writing
     package main

     import ("fmt"
		"os"
		"bufio"
		"io/ioutil"
)



func main ()  {
	message := []byte("Hello Friends")
	err := ioutil.WriteFile("new.txt", message,0644)
	if err != nil{
		fmt.Println(err)
	}

  // creating a file

  f,err := os.Create("Assignment1.txt")
  defer f.Close()
  if err != nil{
	fmt.Println(err)
  }
  f.WriteString("Hello friends !!!")
  f.Sync()

  w := bufio.NewWriter(f)

  w.WriteString("Welcome to Kloudone.")

  w.Flush()
}
------------------------------------------------------------------------
7.  package main
    import (
    "encoding/json"
    "fmt"
    "os"
)
//We’ll use these two structs to demonstrate encoding and decoding of custom types below.

type response1 struct {
    Page   int
    Fruits []string
}
//Only exported fields will be encoded/decoded in JSON. Fields must start with capital letters to be exported.

type response2 struct {
    Page   int      `json:"page"`
    Fruits []string `json:"fruits"`
}
func main() {
//First we’ll look at encoding basic data types to JSON strings. Here are some examples for atomic values.

    bolB, _ := json.Marshal(true)
    fmt.Println(string(bolB))
    intB, _ := json.Marshal(1)
    fmt.Println(string(intB))
    fltB, _ := json.Marshal(2.34)
    fmt.Println(string(fltB))
    strB, _ := json.Marshal("gopher")
    fmt.Println(string(strB))
//And here are some for slices and maps, which encode to JSON arrays and objects as you’d expect.

    slcD := []string{"apple", "peach", "pear"}
    slcB, _ := json.Marshal(slcD)
    fmt.Println(string(slcB))
    mapD := map[string]int{"apple": 5, "lettuce": 7}
    mapB, _ := json.Marshal(mapD)
    fmt.Println(string(mapB))
//The JSON package can automatically encode your custom data types. It will only include exported fields in the encoded output and will by default use those names as the JSON keys.

    res1D := &response1{
        Page:   1,
        Fruits: []string{"apple", "peach", "pear"}}
    res1B, _ := json.Marshal(res1D)
    fmt.Println(string(res1B))
//You can use tags on struct field declarations to customize the encoded JSON key names. Check the definition of response2 above to see an example of such tags.

    res2D := &response2{
        Page:   1,
        Fruits: []string{"apple", "peach", "pear"}}
    res2B, _ := json.Marshal(res2D)
    fmt.Println(string(res2B))
//Now let’s look at decoding JSON data into Go values. Here’s an example for a generic data structure.

    byt := []byte(`{"num":6.13,"strs":["a","b"]}`)
//We need to provide a variable where the JSON package can put the decoded data. This map[string]interface{} will hold a map of strings to arbitrary data types.

    var dat map[string]interface{}
//Here’s the actual decoding, and a check for associated errors.

    if err := json.Unmarshal(byt, &dat); err != nil {
        panic(err)
    }
    fmt.Println(dat)
//In order to use the values in the decoded map, we’ll need to convert them to their appropriate type. For example here we convert the value in num to the expected float64 type.

    num := dat["num"].(float64)
    fmt.Println(num)
//Accessing nested data requires a series of conversions.

    strs := dat["strs"].([]interface{})
    str1 := strs[0].(string)
    fmt.Println(str1)
//We can also decode JSON into custom data types. This has the advantages of adding additional type-safety to our programs and eliminating the need for type assertions when accessing the decoded data.

    str := `{"page": 1, "fruits": ["apple", "peach"]}`
    res := response2{}
    json.Unmarshal([]byte(str), &res)
    fmt.Println(res)
    fmt.Println(res.Fruits[0])
//In the examples above we always used bytes and strings as intermediates between the data and JSON representation on standard out. We can also stream JSON encodings directly to os.Writers like os.Stdout or even HTTP response bodies.

    enc := json.NewEncoder(os.Stdout)
    d := map[string]int{"apple": 5, "lettuce": 7}
    enc.Encode(d)
}
------------------------------------------------------------------------
8.  package main
    import(
	 "errors"
	 "fmt"
	 "math"
	)
func Sqrt(value float64)(float64, error) {
   if(value < 0){
      return 0, errors.New("Math: negative number passed to Sqrt")
   }
   return math.Sqrt(value), nil
}
func main() {
   result, err:= Sqrt(-1)

   if err != nil {
      fmt.Println(err)
   } else {
      fmt.Println(result)
   }
   
   result, err = Sqrt(16)

   if err != nil {
      fmt.Println(err)
   } else {
      fmt.Println(result)
   }
}
------------------------------------------------------------------------
9.  package main

    import "fmt"

type Address struct {
	User
	City string
	State string
	Email string
}

type User struct{
	Name string
	Phone int
	Age int
	City string
	State string
	Email string

}


func main(){
	var details User

	details.Name  = "Johnny"
	details.Phone = 9876543210
	details.Age   = 22
	details.City  = "Europe" 
	details.State = "North"
	details.Email = "Johnny@gmail.com"

	printUser(details)
}

func printUser(userDetails User){

		fmt.Println(userDetails.Name)
		fmt.Println(userDetails.Phone)
		fmt.Println(userDetails.Age)
		fmt.Println(userDetails.City)
		fmt.Println(userDetails.State)
		fmt.Println(userDetails.Email)
}
------------------------------------------------------------------------
10. package main

    import (
        "fmt"
        "strings"
        "unicode"
    )

    func verifyPassword(password string) error {
        var uppercasePresent bool
        var lowercasePresent bool
        var numberPresent bool
        var specialCharPresent bool
        const minPassLength = 8
        const maxPassLength = 64
        var passLen int
        var errorString string

        for _, ch := range password {
            switch {
            case unicode.IsNumber(ch):
                numberPresent = true
                passLen++
            case unicode.IsUpper(ch):
                uppercasePresent = true
                passLen++
            case unicode.IsLower(ch):
                lowercasePresent = true
                passLen++
            case unicode.IsPunct(ch) || unicode.IsSymbol(ch):
                specialCharPresent = true
                passLen++
            case ch == ' ':
                passLen++
            }
        }
        appendError := func(err string) {
            if len(strings.TrimSpace(errorString)) != 0 {
                errorString += ", " + err
            } else {
                errorString = err
            }
        }
        if !lowercasePresent {
            appendError("lowercase letter missing")
        }
        if !uppercasePresent {
            appendError("uppercase letter missing")
        }
        if !numberPresent {
            appendError("atleast one numeric character required")
        }
        if !specialCharPresent {
            appendError("special character missing")
        }
        if !(minPassLength <= passLen && passLen <= maxPassLength) {
  
          appendError(fmt.Sprintf("password length must be between %d to %d characters long", minPassLength, maxPassLength))
        }

        if len(errorString) != 0 {
            return fmt.Errorf(errorString)
        }
        return nil
    }

    // Let's test it
    func main() {
        password := "Password@123"
        err := verifyPassword(password)
        fmt.Println(password, " ", err)
}
